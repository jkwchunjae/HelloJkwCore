@inherits JkwPageBase
@using MudBlazor

<MudText Typo="Typo.h4">참가자: @CompetitionData!.PlayerList!.Count 명</MudText>
<MudChipSet>
  @foreach (var player in CompetitionData!.PlayerList!.OrderBy(x => x.Class).ThenBy(x => x.Name))
  {
    <MudChip OnClick="@(async () => await RemovePlayer(player.Name))">
      @player.Name ( @player.Class )
    </MudChip>
  }
</MudChipSet>
<MudForm Style="max-width: 300px;">
  <MudTextField T="string" @bind-Value="_inputPlayerName" Label="이름" Required="true" RequiredError="이름을 입력해주세요" @ref="inputElement" />
  <MudTextField T="int" @bind-Value="_inputPlayerClass" Label="부수" Required="true" RequiredError="부수를 입력해주세요" />
  <MudButton Variant="Variant.Outlined" OnClick="@(async () => await AddPlayer(_inputPlayerName, _inputPlayerClass))">등록</MudButton>
</MudForm>

@code {
  [Parameter] public CompetitionData CompetitionData { get; set; }
  [Parameter] public EventCallback<CompetitionData> CompetitionDataChanged { get; set; }

  [Inject] IPpService? Service { get; set; }
  [Inject] IDialogService? DialogService { get; set; }

  private CompetitionUpdator? CompetitionUpdator;
  private string _inputPlayerName = string.Empty;
  private int _inputPlayerClass = default;
  private MudTextField<string>? inputElement;

  protected override void OnPageInitialized()
  {
    CompetitionUpdator = new CompetitionUpdator(CompetitionData, Service!);
  }

  private async Task AddPlayer(string playerName, int playerClass)
  {
    if (playerClass == 0)
    {
      return;
    }
    var player = new Player
      {
        Name = new PlayerName(playerName),
        Class = playerClass,
      };
    CompetitionData = await CompetitionUpdator!.AddPlayers(new[] { player });
    await CompetitionDataChanged.InvokeAsync(CompetitionData);
    _inputPlayerName = string.Empty;
    await inputElement!.FocusAsync();
  }

  private async Task RemovePlayer(PlayerName playerName)
  {
    var param = new DialogParameters
      {
        ["Content"] = $"{playerName}님을 삭제하시겠습니까?",
        ["SubmitText"] = "삭제",
        ["SubmitColor"] = Color.Error,
      };
    var dialog = DialogService!.Show<PpConfirmDialog>("참가자 관리", param);
    var result = await dialog.Result;

    if (result.Data is bool deleteMember && deleteMember)
    {
      CompetitionData = await CompetitionUpdator!.RemovePlayer(playerName);
      await CompetitionDataChanged.InvokeAsync(CompetitionData);
      _inputPlayerName = string.Empty;
      await inputElement!.FocusAsync();
    }
  }
}
