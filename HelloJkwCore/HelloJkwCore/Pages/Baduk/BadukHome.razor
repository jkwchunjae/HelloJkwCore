@page "/baduk"
@inherits JkwPageBase

@using ProjectBaduk;
@using Common;

@{
    Dictionary<int, List<int>> PointArray = new()
    {
        [19] = new() { 4, 10, 16 },
        [15] = new() { 4, 8, 12 },
        [13] = new() { 4, 7, 10 },
        [9] = new() { 5 },
    };
    string IndexText = $"{Board.CurrentIndex} / {Board.LastIndex}";
    var Size = Board?.Size ?? 19;
}

<BadukSettingBoxComponent
                          @bind-Board=Board
                          OnChangeSize=ChangeSize
                          PointArray=PointArray
                          ></BadukSettingBoxComponent>

<table>
    @for (var roww = 1; roww <= Size; roww++)
    {
        var row = roww;
        var flagTop = row == 1 ? 1 : 0;
        var flagBottom = row == Size ? 1 : 0;
        var flagPointRow = PointArray[Size].Any(num => num == row);
        <tr class="baduk">
            @for (var columnn = 1; columnn <= Size; columnn++)
            {
                var column = columnn;
                var flagLeft = column == 1 ? 1 : 0;
                var flagRight = column == Size ? 1 : 0;
                var flagBoard = $"{flagLeft}{flagTop}{flagRight}{flagBottom}";
                var flagPointColumn = PointArray[Size].Any(num => num == column);
                var flagPoint = flagPointRow && flagPointColumn ? "_point" : "";
                var cellImageSrc = $"/images/baduk/baduk_board_{flagBoard}{flagPoint}.png";
                var hasStone = Board.FindLastStone(row, column, out var stone, out var index);
                var blackDisplay = hasStone && stone?.Color == StoneColor.Black ? "block" : "none";
                var whiteDisplay = hasStone && stone?.Color == StoneColor.White ? "block" : "none";
                var indexColorClass = !hasStone || !Board.VisibleStoneIndex ? "stone-index-none" :
                    stone?.Color == StoneColor.Black ? "stone-index-black" : "stone-index-white";
                <td class="board-cell" @onclick="(() => ClickCell(row, column))">
                    <img class="image-stone" src="/images/baduk/black-go-stone24.png" style="display: @blackDisplay" />
                    <img class="image-stone" src="/images/baduk/white-go-stone24.png" style="display: @whiteDisplay" />
                    <span class="stone-index @indexColorClass">@index</span>
                    <img class="image-cell" src="@cellImageSrc" />
                </td>
            }
        </tr>
    }
</table>
<div class="btn-group" role="group">
    <button type="button" class="btn btn-outline-secondary" @onclick="(() => Board.ChangeCurrentIndex(-1))">&lt;</button>
    <button type="button" class="btn btn-outline-secondary" @onclick="(() => Board.ChangeCurrentIndex(-5))">&lt; 5</button>
    <input type="text" class="index-text" value="@IndexText" readonly="readonly" />
    <button type="button" class="btn btn-outline-secondary" @onclick="(() => Board.ChangeCurrentIndex(5))">5 &gt;</button>
    <button type="button" class="btn btn-outline-secondary" @onclick="(() => Board.ChangeCurrentIndex(1))">&gt;</button>
</div>

<div>
    <img src="/images/baduk/black-go-stone24.png" />
    <span class="badge badge-dark">@Board.RemovedCount[StoneColor.Black]</span>
    <img src="/images/baduk/white-go-stone24.png" />
    <span class="badge badge-dark">@Board.RemovedCount[StoneColor.White]</span>
</div>

<div style="max-width: 400px;">
@if (IsAuthenticated && (DiaryList?.Count ?? 0) >= 2)
{
    <select class="form-control" @onchange="((args) => ChangeDiaryInfo(args))">
        @for (var i = 0; i < DiaryList.Count; i++)
        {
            <option value="@i">@DiaryList[i].Name</option>
        }
    </select>
}
@if (IsAuthenticated && Diary != null)
{
    <div class="input-group">
        <input class="form-control" @bind-value="SaveFileName" placeholder="저장할 파일 이름을 입력하세요"/>
        <div class="input-group-append">
            <button class="btn btn-outline-dark" @onclick="(async () => await SaveBoard())">저장</button>
            <button class="btn btn-outline-danger" @onclick="(() => DeleteFlag = !DeleteFlag)">삭제</button>
        </div>
    </div>
    @if (DeleteFlag)
    {
        <button class="btn btn-danger" @onclick="(() => DeleteBoard())">
            (삭제 확인) 정말 삭제하시겠습니까?
        </button>
    }
    <select class="form-control" @onchange="((args) => ChangeGameData(args))">
        <option value=""></option>
        @for (var i = 0; i < GameDataList.Count; i++)
        {
            <option value="@i">@GameDataList[i].Subject</option>
        }
    </select>
}

@if (User?.HasRole(UserRole.BadukCreator) ?? false)
{
    <div class="input-group">
        <input class="form-control" @bind-value="NewDiaryName" placeholder="바둑기록 이름" />
        <div class="input-group-append">
            <button class="btn btn-outline-dark" @onclick="(async () => await CreateDiary())">생성</button>
            @if (Diary.OwnerUserId == User.Id)
            {
            <button class="btn btn-outline-danger" @onclick="(() => DiaryDeleteFlag = !DiaryDeleteFlag)">삭제</button>
            }
        </div>
    </div>
    @if (DiaryDeleteFlag)
    {
        <button class="btn btn-danger" @onclick="(() => DeleteDiary())">
            (삭제 확인) 정말 삭제하시겠습니까?
        </button>
    }
}
</div>
