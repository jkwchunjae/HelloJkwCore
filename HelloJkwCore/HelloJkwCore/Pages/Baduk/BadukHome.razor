@page "/baduk"
@inherits JkwPageBase

@using ProjectBaduk;

<div>
    <div class="btn-group" role="group">
        @foreach (var size in PointArray.Select(x => x.Key))
        {
            if (size == Size)
            {
                <button type="button" class="btn btn-secondary">@size 칸 </button>
            }
            else
            {
                <button type="button" class="btn btn-outline-secondary" @onclick="(() => Board.ChangeSize(size))">@size 칸 </button>
            }
        }
    </div>
    <div class="btn-group" role="group">
        @if (Board.ChangeMode == StoneChangeMode.Auto)
        {
            <button type="button" class="btn btn-info">자동</button>
            <button type="button" class="btn btn-outline-info" @onclick="(() => Board.ChangeMode = StoneChangeMode.Menual)">수동</button>
        }
        else
        {
            <button type="button" class="btn btn-outline-info" @onclick="(() => Board.ChangeMode = StoneChangeMode.Auto)">자동</button>
            <button type="button" class="btn btn-info">수동</button>
        }
    </div>
    <div class="btn-group" role="group">
        @if (Board.CurrentColor == StoneColor.Black)
        {
            <button type="button" class="btn btn-dark">
                <img src="/images/baduk/black-go-stone24.png" />
            </button>
            <button type="button" class="btn btn-outline-dark" @onclick="(() => Board.CurrentColor = StoneColor.White)">
                <img src="/images/baduk/white-go-stone24.png" />
            </button>
        }
        else
        {
            <button type="button" class="btn btn-outline-dark" @onclick="(() => Board.CurrentColor = StoneColor.Black)">
                <img src="/images/baduk/black-go-stone24.png" />
            </button>
            <button type="button" class="btn btn-dark">
                <img src="/images/baduk/white-go-stone24.png" />
            </button>
        }
    </div>
    <div class="btn-group" role="group">
        @if (Board.VisibleStoneIndex)
        {
            <button type="button" class="btn btn-success">번호</button>
            <button type="button" class="btn btn-outline-success" @onclick="(() => Board.VisibleStoneIndex = false)">OFF</button>
        }
        else
        {
            <button type="button" class="btn btn-outline-success" @onclick="(() => Board.VisibleStoneIndex = true)">번호</button>
            <button type="button" class="btn btn-success">OFF</button>
        }
    </div>
</div>

<table>
    @for (var roww = 1; roww <= Size; roww++)
    {
        var row = roww;
        var flagTop = row == 1 ? 1 : 0;
        var flagBottom = row == Size ? 1 : 0;
        var flagPointRow = PointArray[Size].Any(num => num == row);
        <tr class="baduk">
            @for (var columnn = 1; columnn <= Size; columnn++)
            {
                var column = columnn;
                var flagLeft = column == 1 ? 1 : 0;
                var flagRight = column == Size ? 1 : 0;
                var flagBoard = $"{flagLeft}{flagTop}{flagRight}{flagBottom}";
                var flagPointColumn = PointArray[Size].Any(num => num == column);
                var flagPoint = flagPointRow && flagPointColumn ? "_point" : "";
                var cellImageSrc = $"/images/baduk/baduk_board_{flagBoard}{flagPoint}.png";
                var hasStone = Board.FindLastStone(row, column, out var stone, out var index);
                var blackDisplay = hasStone && stone?.Color == StoneColor.Black ? "block" : "none";
                var whiteDisplay = hasStone && stone?.Color == StoneColor.White ? "block" : "none";
                var indexColorClass = !hasStone || !Board.VisibleStoneIndex ? "stone-index-none" :
                    stone?.Color == StoneColor.Black ? "stone-index-black" : "stone-index-white";
                <td class="board-cell" @onclick="(() => ClickCell(row, column))">
                    <img class="image-stone" src="/images/baduk/black-go-stone24.png" style="display: @blackDisplay"/>
                    <img class="image-stone" src="/images/baduk/white-go-stone24.png" style="display: @whiteDisplay"/>
                    <span class="stone-index @indexColorClass">@index</span>
                    <img class="image-cell" src="@cellImageSrc"/>
                </td>
            }
        </tr>
    }
</table>
<div class="btn-group" role="group">
    <button type="button" class="btn btn-outline-secondary" @onclick="(() => Board.ChangeCurrentIndex(-1))">&lt;</button>
    <button type="button" class="btn btn-outline-secondary" @onclick="(() => Board.ChangeCurrentIndex(-5))">&lt; 5</button>
    <input type="text" class="index-text" value="@IndexText" readonly="readonly"/>
    <button type="button" class="btn btn-outline-secondary" @onclick="(() => Board.ChangeCurrentIndex(5))">5 &gt;</button>
    <button type="button" class="btn btn-outline-secondary" @onclick="(() => Board.ChangeCurrentIndex(1))">&gt;</button>
</div>

<div>
    <img src="/images/baduk/black-go-stone24.png" />
    <span class="badge badge-dark">@Board.RemovedCount[StoneColor.Black]</span>
    <img src="/images/baduk/white-go-stone24.png" />
    <span class="badge badge-dark">@Board.RemovedCount[StoneColor.White]</span>
</div>
