@inherits JkwPageBase
@page "/sufc/teammaker"

@using ProjectSuFc;

<h1>수FC / 팀짜기</h1>

<div>
    <RadzenDropDown TValue="TeamMakerStrategy" Data="@(TeamMakerStrategies.Select(x => new { Value = x.Strategy, Text = x.Name } ).ToList())"
                    ValueProperty="Value" TextProperty="Text"
                    @bind-Value="TeamMakerStrategy"
                    Change="(() => StrategyChanged())"/>
</div>
<div>
    <RadzenNumeric Min="2" Max="5" @bind-Value="TeamCount" />
</div>
<div>
    <RadzenLink Text="팀 세팅 조건 설정" Path="/sufc/team-setting-option" />
</div>
<div>
    <button class="btn btn-info" @onclick="@(async () => await MakeTeam())">팀 만들기</button>
</div>
@if (TeamResult != null)
{
<div>
    <RadzenTextBox @bind-Value="Title" Placeholder="제목을 입력하세요" Style="width: 150px;"/>
    <button class="btn btn-outline-success" @onclick="@(async () => await SaveFile())">결과 저장</button>
</div>
<div>
    <RadzenCheckBox @bind-Value="VisibleScore" TValue="bool" Name="VisibleScoreCheckBox"/>
    <RadzenLabel Text="숫자 보기" Component="VisibleScoreCheckBox" @onclick="(() => VisibleScore = !VisibleScore)"/>
</div>
}

@if (TeamResult != null)
{
<table class="table" style="width: initial">
    <thead>
        <tr>
            @foreach (var team in TeamResult.TeamNames)
            {
                <th>@team</th>
            }
        </tr>
    </thead>
    <tbody>
        @if (TeamMakerStrategy == TeamMakerStrategy.Manual || LeftMembers.Any())
        {
            <tr>
                <td colspan="3">
                    <RadzenDropDown TValue="TeamName" Data="TeamResult.TeamNames" @bind-Value="SelectedTeamName" Style="width: 100px;"></RadzenDropDown>
                    <RadzenDropDown TValue="MemberName" Data="LeftMembers" @bind-Value="SelectedMemberName" Style="width: 150px;"></RadzenDropDown>
                    <button class="btn btn-outline-dark" @onclick="@(() => AddToTeam(SelectedTeamName, SelectedMemberName))">추가</button>
                </td>
            </tr>
        }
        @for (var i = 0; i < TeamResult.MaximumTeamSize; i++)
        {
            <tr>
                @foreach (var team in TeamResult.TeamNames)
                {
                    var members = TeamResult.GroupByTeam.ContainsKey(team) ? TeamResult.GroupByTeam[team] : new List<MemberName>();
                    <td>
                        @if (i < members.Count)
                        {
                            var memberName = TeamResult.GroupByTeam[team][i];
                            <span class="member-name" @onclick="(() => ChangeDeleteButton(memberName, false))">
                                @memberName
                            </span>
                            @if (TeamResult.Score.Any() && VisibleScore)
                            {
                                <span class="member-score">
                                    @TeamResult.Score[memberName]
                                </span>
                            }
                            @if (TeamMakerStrategy == TeamMakerStrategy.Manual)
                            {
                                @if (MemberDeleteButton.ContainsKey(memberName) ? MemberDeleteButton[memberName] : false)
                                {
                                    <button class="btn btn-sm btn-danger" @onclick="(() => DeleteFromResult(memberName))"><i class="bi-x"></i></button>
                                }
                                else
                                {
                                    <i class="bi-x btn btn-sm" @onclick="(() => ChangeDeleteButton(memberName, true))" style="cursor: pointer;"></i>
                                }
                            }
                        }
                    </td>
                }
            </tr>
        }
        @if (TeamResult.Score.Any() && VisibleScore)
        {
            <tr>
                @foreach (var team in TeamResult.TeamNames)
                {
                    var members = TeamResult.GroupByTeam.ContainsKey(team) ? TeamResult.GroupByTeam[team] : new List<MemberName>();
                    var sum = TeamResult.Score.Where(x => members.Contains(x.Key)).Sum(x => x.Value);
                    <td class="score-summary">
                        @sum.ToString("#.00")
                    </td>
                }
            </tr>
        }
    </tbody>
</table>
}

