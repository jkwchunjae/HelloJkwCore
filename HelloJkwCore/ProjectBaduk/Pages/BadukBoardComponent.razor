@inherits JkwPageBase

@using ProjectBaduk;

<div class="table-container">
    @for (var roww = 1; roww <= Size; roww++)
    {
        var row = roww;
        var flagTop = row == 1 ? 1 : 0;
        var flagBottom = row == Size ? 1 : 0;
        var flagPointRow = PointArray[Size].Any(num => num == row);
        <div class="row-container">
            @for (var columnn = 1; columnn <= Size; columnn++)
            {
                var column = columnn;
                var flagLeft = column == 1 ? 1 : 0;
                var flagRight = column == Size ? 1 : 0;
                var flagBoard = $"{flagLeft}{flagTop}{flagRight}{flagBottom}";
                var flagPointColumn = PointArray[Size].Any(num => num == column);
                var flagPoint = flagPointRow && flagPointColumn ? "_point" : "";
                var cellImageSrc = $"/images/baduk/baduk_board_{flagBoard}{flagPoint}.png";
                var hasStone = Board.FindLastStone(row, column, out var stone, out var index);
                var blackDisplay = hasStone && stone?.Color == StoneColor.Black ? "block" : "none";
                var whiteDisplay = hasStone && stone?.Color == StoneColor.White ? "block" : "none";
                var indexColorClass = !hasStone || !Board.VisibleStoneIndex ? "stone-index-none" :
                    stone?.Color == StoneColor.Black ? "stone-index-black" : "stone-index-white";
                <div class="cell-container" @onclick="(async () => await ClickCell(row, column))">
                    <img class="image-stone" src="/images/baduk/black-go-stone24.png" style="display: @blackDisplay" />
                    <img class="image-stone" src="/images/baduk/white-go-stone24.png" style="display: @whiteDisplay" />
                    <span class="stone-index @indexColorClass">@index</span>
                    <img src="@cellImageSrc" />
                </div>
            }
        </div>
    }
</div>
<div>
    <div class="board-info">
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-outline-secondary" @onclick="(async () => await ChangeCurrentIndex(-1))">&lt;</button>
        <button type="button" class="btn btn-outline-secondary" @onclick="(async () => await ChangeCurrentIndex(-5))">&lt; 5</button>
        <input type="text" class="index-text" value="@IndexText" readonly="readonly" />
        <button type="button" class="btn btn-outline-secondary" @onclick="(async () => await ChangeCurrentIndex(5))">5 &gt;</button>
        <button type="button" class="btn btn-outline-secondary" @onclick="(async () => await ChangeCurrentIndex(1))">&gt;</button>
    </div>
    </div>

    <div class="board-info">
        <img src="/images/baduk/black-go-stone24.png" />
        <span class="badge badge-dark">@Board.RemovedCount[StoneColor.Black]</span>
        <img src="/images/baduk/white-go-stone24.png" />
        <span class="badge badge-dark">@Board.RemovedCount[StoneColor.White]</span>
    </div>
</div>


@code {
    [Parameter]
    public BadukBoard Board { get; set; }

    [Parameter]
    public EventCallback<BadukBoard> BoardChanged { get; set; }

    private int Size => Board?.Size ?? 19;
    private string IndexText => $"{Board?.CurrentIndex} / {Board?.LastIndex}";

    Dictionary<int, List<int>> PointArray = new()
    {
        [19] = new() { 4, 10, 16 },
        [15] = new() { 4, 8, 12 },
        [13] = new() { 4, 7, 10 },
        [9] = new() { 5 },
    };

    private async Task ClickCell(int row, int column)
    {
        Board.ClickCell(row, column);
        await BoardChanged.InvokeAsync(Board);
    }

    private async Task ChangeCurrentIndex(int diff)
    {
        Board.ChangeCurrentIndex(diff);
        await BoardChanged.InvokeAsync(Board);
    }
}
