@inherits JkwPageBase

<div>
    <MudButtonGroup Color="Color.Dark" Variant="Variant.Outlined">
        @foreach (var size in PointArray.Select(x => x.Key))
        {
            var label = $"{size} 칸";
            var selectedLabel = $"[{size} 칸]";
            <MudButton
                Variant="Variant.Filled"
                OnClick="(() => ChangeSize(size))"
            >
                @(size == (Board?.Size ?? 19) ? selectedLabel : label)
            </MudButton>
        }
    </MudButtonGroup>
    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
        <MudButton OnClick="(() => ChangeChangeMode(StoneChangeMode.Auto))">
            자동
        </MudButton>
        <MudButton OnClick="(() => ChangeChangeMode(StoneChangeMode.Menual))">
            수동
        </MudButton>
    </MudButtonGroup>
    <MudButtonGroup Color="Color.Surface" Variant="Variant.Outlined">
        <MudButton OnClick="(() => ChangeColor(StoneColor.Black))">
            <MudImage Src="/images/baduk/black-go-stone24.png" />
        </MudButton>
        <MudButton OnClick="(() => ChangeColor(StoneColor.White))">
            <MudImage Src="/images/baduk/white-go-stone24.png" />
        </MudButton>
    </MudButtonGroup>
    <MudButtonGroup Color="Color.Secondary" Variant="Variant.Outlined">
        <MudButton OnClick="(() => ChangeVisibleIndex(true))">
            번호
        </MudButton>
        <MudButton OnClick="(() => ChangeVisibleIndex(false))">
            OFF
        </MudButton>
    </MudButtonGroup>
</div>

@code {
    [Parameter]
    public BadukBoard Board { get; set; }

    [Parameter]
    public EventCallback<BadukBoard> BoardChanged { get; set; }

    [Parameter]
    public EventCallback<int> OnChangeSize { get; set; }

    Dictionary<int, List<int>> PointArray = new()
    {
        [19] = new() { 4, 10, 16 },
        [15] = new() { 4, 8, 12 },
        [13] = new() { 4, 7, 10 },
        [9] = new() { 5 },
    };


    private async Task ChangeSize(int size)
    {
        Board = new BadukBoard(size);
        await BoardChanged.InvokeAsync(Board);
        StateHasChanged();
    }

    private async Task ChangeChangeMode(StoneChangeMode changeMode)
    {
        Board.ChangeMode = changeMode;
        await BoardChanged.InvokeAsync(Board);
        StateHasChanged();
    }

    private async Task ChangeColor(StoneColor color)
    {
        Board.CurrentColor = color;
        await BoardChanged.InvokeAsync(Board);
        StateHasChanged();
    }

    private async Task ChangeVisibleIndex(bool visibleStoneIndex)
    {
        Board.VisibleStoneIndex = visibleStoneIndex;
        await BoardChanged.InvokeAsync(Board);
        StateHasChanged();
    }
}
